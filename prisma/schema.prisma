generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  role          Role       @default(USER)
  cart          Cart?
  order         Order[]
  address       Address[]
  wishList      WishList[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  images        String[]
  categoryId    String
  status        Status         @default(Normal)
  cartItem      CartItem[]
  orderItem     OrderItem[]
  wishListItems WishListItem[]
  inventory     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("product")
}

model WishList {
  id        String         @id @default(uuid())
  userId    String
  items     WishListItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wishList")
}

model WishListItem {
  id         String   @id @default(uuid())
  wishListId String
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  wishList WishList @relation(fields: [wishListId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishListId, productId])
  @@map("wishListItem")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("category")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  cartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cart")
}

model CartItem {
  id        String   @id @default(uuid())
  cardId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart    Cart    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("cartItem")
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  addressId String
  total     Float
  status    OrderStatus @default(PENDING)
  orderItem OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("order")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderItem")
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  street     String
  City       String
  State      String
  postalCode String
  Country    String
  order      Order[]
  isDefault  Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Status {
  Popular
  Normal
}
